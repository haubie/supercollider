<!-- livebook:{"persist_outputs":true} -->

# SuperCollider tour

```elixir
Mix.install([
  :supercollider
])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Boot SuperCollider

```elixir
SuperCollider.start()
```

<!-- livebook:{"output":true} -->

```
INIT: %SuperCollider.SoundServer{
  ip: '127.0.0.1',
  hostname: 'localhost',
  port: 57110,
  socket: nil,
  type: :scsynth,
  responses: %{}
}

20:42:30.983 [info] scsynth - waiting up to 5 seconds to see if already loaded ‚è≥

20:42:35.984 [info] scsynth - no response, scsynth likely not booted.

20:42:35.984 [info] scsynth - attempting to start üèÅ

```

<!-- livebook:{"output":true} -->

```
#PID<0.714.0>
```

## Get version and status

```elixir
SuperCollider.command(:version)
```

<!-- livebook:{"output":true} -->

```
:ok
```

<!-- livebook:{"output":true} -->

```

20:42:38.500 [info] Version: [{"Program name. May be \"scsynth\" or \"supernova\".", "scsynth"}, {"Major version number. Equivalent to sclang's Main.scVersionMajor.", 3}, {"Minor version number. Equivalent to sclang's Main.scVersionMinor.", 13}, {"Patch version name. Equivalent to the sclang code \".\" ++ Main.scVersionPatch ++ Main.scVersionTweak.", ".0"}, {"Git branch name.", "Version-3.13.0"}, {"First seven hex digits of the commit hash.", "3188503"}]

```

```elixir
SuperCollider.command(:status)
```

<!-- livebook:{"output":true} -->

```
:ok
```

<!-- livebook:{"output":true} -->

```

20:42:39.277 [info] Status: [{"unused", 1}, {"number of unit generators", 0}, {"number of synths", 0}, {"number of groups", 1}, {"number of loaded synth definitions", 2}, {"average percent CPU usage for signal processing", 0.024944765493273735}, {"peak percent CPU usage for signal processing", 0.26880326867103577}, {"nominal sample rate", 44100.0}, {"actual sample rate", 44099.95916484119}]

```

```elixir
# You can fetch responses from the server using the response function:
SuperCollider.response()
```

<!-- livebook:{"output":true} -->

```
%{
  status: [
    {"unused", 1},
    {"number of unit generators", 0},
    {"number of synths", 0},
    {"number of groups", 1},
    {"number of loaded synth definitions", 2},
    {"average percent CPU usage for signal processing", 0.024944765493273735},
    {"peak percent CPU usage for signal processing", 0.26880326867103577},
    {"nominal sample rate", 44100.0},
    {"actual sample rate", 44099.95916484119}
  ],
  version: [
    {"Program name. May be \"scsynth\" or \"supernova\".", "scsynth"},
    {"Major version number. Equivalent to sclang's Main.scVersionMajor.", 3},
    {"Minor version number. Equivalent to sclang's Main.scVersionMinor.", 13},
    {"Patch version name. Equivalent to the sclang code \".\" ++ Main.scVersionPatch ++ Main.scVersionTweak.",
     ".0"},
    {"Git branch name.", "Version-3.13.0"},
    {"First seven hex digits of the commit hash.", "3188503"}
  ]
}
```

```elixir
# Or if you just want a particular key-value:
SuperCollider.response(:version)
```

<!-- livebook:{"output":true} -->

```
[
  {"Program name. May be \"scsynth\" or \"supernova\".", "scsynth"},
  {"Major version number. Equivalent to sclang's Main.scVersionMajor.", 3},
  {"Minor version number. Equivalent to sclang's Main.scVersionMinor.", 13},
  {"Patch version name. Equivalent to the sclang code \".\" ++ Main.scVersionPatch ++ Main.scVersionTweak.",
   ".0"},
  {"Git branch name.", "Version-3.13.0"},
  {"First seven hex digits of the commit hash.", "3188503"}
]
```

## Load a SynthDef from file

```elixir
alias SuperCollider.SynthDef
```

<!-- livebook:{"output":true} -->

```
SuperCollider.SynthDef
```

```elixir
file = "/Users/haubie/Development/supercollider_livebook/closedhat.scsyndef"
# file = "/Users/haubie/Development/supercollider_livebook/ambient.scsyndef"
synthdef = SynthDef.from_file(file)
```

<!-- livebook:{"output":true} -->

```
[
  %SuperCollider.SynthDef{
    name: "closedhat",
    constant_count: 6,
    constant_values_list: [8000.0, 2400.0, 0.5, 1.0, 0.0, 0.1],
    parameter_count: 0,
    parameter_values_list: [],
    parameter_names_count: 0,
    parameter_names_list: [],
    ugen_count: 8,
    ugen_specs_list: [
      %SuperCollider.SynthDef.UGen{
        class_name: "WhiteNoise",
        calculation_rate: 2,
        special_index: 0,
        inputs_count: 0,
        input_specs_list: [],
        outputs_count: 1,
        output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
      },
      %SuperCollider.SynthDef.UGen{
        class_name: "LPF",
        calculation_rate: 2,
        special_index: 0,
        inputs_count: 2,
        input_specs_list: [
          %{_enum_count: 0, index: 0, output_index: 0, type: :ugen},
          %{_enum_count: 1, index: 0, type: :constant}
        ],
        outputs_count: 1,
        output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
      },
      %SuperCollider.SynthDef.UGen{
        class_name: "HPF",
        calculation_rate: 2,
        special_index: 0,
        inputs_count: 2,
        input_specs_list: [
          %{_enum_count: 0, index: 1, output_index: 0, type: :ugen},
          %{_enum_count: 1, index: 1, type: :constant}
        ],
        outputs_count: 1,
        output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
      },
      %SuperCollider.SynthDef.UGen{
        class_name: "BinaryOpUGen",
        calculation_rate: 2,
        special_index: 2,
        inputs_count: 2,
        input_specs_list: [
          %{_enum_count: 0, index: 2, type: :constant},
          %{_enum_count: 1, index: 2, output_index: 0, type: :ugen}
        ],
        outputs_count: 1,
        output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
      },
      %SuperCollider.SynthDef.UGen{
        class_name: "Line",
        calculation_rate: 2,
        special_index: 0,
        inputs_count: 4,
        input_specs_list: [
          %{_enum_count: 0, index: 3, type: :constant},
          %{_enum_count: 1, index: 4, type: :constant},
          %{_enum_count: 2, index: 5, type: :constant},
          %{_enum_count: 3, index: 4, type: :constant}
        ],
        outputs_count: 1,
        output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
      },
      %SuperCollider.SynthDef.UGen{
        class_name: "BinaryOpUGen",
        calculation_rate: 2,
        special_index: 2,
        inputs_count: 2,
        input_specs_list: [
          %{_enum_count: 0, index: 3, output_index: 0, type: :ugen},
          %{_enum_count: 1, index: 4, output_index: 0, type: :ugen}
        ],
        outputs_count: 1,
        output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
      },
      %SuperCollider.SynthDef.UGen{
        class_name: "Pan2",
        calculation_rate: 2,
        special_index: 0,
        inputs_count: 3,
        input_specs_list: [
          %{_enum_count: 0, index: 5, output_index: 0, type: :ugen},
          %{_enum_count: 1, index: 4, type: :constant},
          %{_enum_count: 2, index: 3, type: :constant}
        ],
        outputs_count: 2,
        output_specs_list: [
          %{_enum_count: 0, calculation_rate: 2},
          %{_enum_count: 1, calculation_rate: 2}
        ]
      },
      %SuperCollider.SynthDef.UGen{
        class_name: "Out",
        calculation_rate: 2,
        special_index: 0,
        inputs_count: 3,
        input_specs_list: [
          %{_enum_count: 0, index: 4, type: :constant},
          %{_enum_count: 1, index: 6, output_index: 0, type: :ugen},
          %{_enum_count: 2, index: 6, output_index: 1, type: :ugen}
        ],
        outputs_count: 0,
        output_specs_list: []
      }
    ],
    varient_count: 0,
    varient_specs_list: []
  }
]
```

## Encode synthdef as a binary

```elixir
bin_data = SynthDef.to_binary(synthdef)
```

<!-- livebook:{"output":true} -->

```
<<83, 67, 103, 102, 0, 0, 0, 2, 0, 1, 9, 99, 108, 111, 115, 101, 100, 104, 97, 116, 0, 0, 0, 6, 69,
  250, 0, 0, 69, 22, 0, 0, 63, 0, 0, 0, 63, 128, 0, 0, 0, 0, 0, 0, 61, 204, 204, 205, 0, 0, ...>>
```

```elixir
bin_data |> :binary.bin_to_list() |> length()
```

<!-- livebook:{"output":true} -->

```
361
```

```elixir
decoded_synthdef = SynthDef.ScFile.decode(bin_data)
```

<!-- livebook:{"output":true} -->

```
%SuperCollider.SynthDef.ScFile{
  type_id: "SCgf",
  file_version: 2,
  synth_defs_count: 1,
  synth_defs: [
    %SuperCollider.SynthDef{
      name: "closedhat",
      constant_count: 6,
      constant_values_list: [8000.0, 2400.0, 0.5, 1.0, 0.0, 0.1],
      parameter_count: 0,
      parameter_values_list: [],
      parameter_names_count: 0,
      parameter_names_list: [],
      ugen_count: 8,
      ugen_specs_list: [
        %SuperCollider.SynthDef.UGen{
          class_name: "WhiteNoise",
          calculation_rate: 2,
          special_index: 0,
          inputs_count: 0,
          input_specs_list: [],
          outputs_count: 1,
          output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
        },
        %SuperCollider.SynthDef.UGen{
          class_name: "LPF",
          calculation_rate: 2,
          special_index: 0,
          inputs_count: 2,
          input_specs_list: [
            %{_enum_count: 0, index: 0, output_index: 0, type: :ugen},
            %{_enum_count: 1, index: 0, type: :constant}
          ],
          outputs_count: 1,
          output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
        },
        %SuperCollider.SynthDef.UGen{
          class_name: "HPF",
          calculation_rate: 2,
          special_index: 0,
          inputs_count: 2,
          input_specs_list: [
            %{_enum_count: 0, index: 1, output_index: 0, type: :ugen},
            %{_enum_count: 1, index: 1, type: :constant}
          ],
          outputs_count: 1,
          output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
        },
        %SuperCollider.SynthDef.UGen{
          class_name: "BinaryOpUGen",
          calculation_rate: 2,
          special_index: 2,
          inputs_count: 2,
          input_specs_list: [
            %{_enum_count: 0, index: 2, type: :constant},
            %{_enum_count: 1, index: 2, output_index: 0, type: :ugen}
          ],
          outputs_count: 1,
          output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
        },
        %SuperCollider.SynthDef.UGen{
          class_name: "Line",
          calculation_rate: 2,
          special_index: 0,
          inputs_count: 4,
          input_specs_list: [
            %{_enum_count: 0, index: 3, type: :constant},
            %{_enum_count: 1, index: 4, type: :constant},
            %{_enum_count: 2, index: 5, type: :constant},
            %{_enum_count: 3, index: 4, type: :constant}
          ],
          outputs_count: 1,
          output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
        },
        %SuperCollider.SynthDef.UGen{
          class_name: "BinaryOpUGen",
          calculation_rate: 2,
          special_index: 2,
          inputs_count: 2,
          input_specs_list: [
            %{_enum_count: 0, index: 3, output_index: 0, type: :ugen},
            %{_enum_count: 1, index: 4, output_index: 0, type: :ugen}
          ],
          outputs_count: 1,
          output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
        },
        %SuperCollider.SynthDef.UGen{
          class_name: "Pan2",
          calculation_rate: 2,
          special_index: 0,
          inputs_count: 3,
          input_specs_list: [
            %{_enum_count: 0, index: 5, output_index: 0, type: :ugen},
            %{_enum_count: 1, index: 4, type: :constant},
            %{_enum_count: 2, index: 3, type: :constant}
          ],
          outputs_count: 2,
          output_specs_list: [
            %{_enum_count: 0, calculation_rate: 2},
            %{_enum_count: 1, calculation_rate: 2}
          ]
        },
        %SuperCollider.SynthDef.UGen{
          class_name: "Out",
          calculation_rate: 2,
          special_index: 0,
          inputs_count: 3,
          input_specs_list: [
            %{_enum_count: 0, index: 4, type: :constant},
            %{_enum_count: 1, index: 6, output_index: 0, type: :ugen},
            %{_enum_count: 2, index: 6, output_index: 1, type: :ugen}
          ],
          outputs_count: 0,
          output_specs_list: []
        }
      ],
      varient_count: 0,
      varient_specs_list: []
    }
  ]
}
```

```elixir
decoded_synthdef.synth_defs |> SynthDef.ScFile.encode() |> SynthDef.ScFile.decode()
```

<!-- livebook:{"output":true} -->

```
%SuperCollider.SynthDef.ScFile{
  type_id: "SCgf",
  file_version: 2,
  synth_defs_count: 1,
  synth_defs: [
    %SuperCollider.SynthDef{
      name: "closedhat",
      constant_count: 6,
      constant_values_list: [8000.0, 2400.0, 0.5, 1.0, 0.0, 0.1],
      parameter_count: 0,
      parameter_values_list: [],
      parameter_names_count: 0,
      parameter_names_list: [],
      ugen_count: 8,
      ugen_specs_list: [
        %SuperCollider.SynthDef.UGen{
          class_name: "WhiteNoise",
          calculation_rate: 2,
          special_index: 0,
          inputs_count: 0,
          input_specs_list: [],
          outputs_count: 1,
          output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
        },
        %SuperCollider.SynthDef.UGen{
          class_name: "LPF",
          calculation_rate: 2,
          special_index: 0,
          inputs_count: 2,
          input_specs_list: [
            %{_enum_count: 0, index: 0, output_index: 0, type: :ugen},
            %{_enum_count: 1, index: 0, type: :constant}
          ],
          outputs_count: 1,
          output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
        },
        %SuperCollider.SynthDef.UGen{
          class_name: "HPF",
          calculation_rate: 2,
          special_index: 0,
          inputs_count: 2,
          input_specs_list: [
            %{_enum_count: 0, index: 1, output_index: 0, type: :ugen},
            %{_enum_count: 1, index: 1, type: :constant}
          ],
          outputs_count: 1,
          output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
        },
        %SuperCollider.SynthDef.UGen{
          class_name: "BinaryOpUGen",
          calculation_rate: 2,
          special_index: 2,
          inputs_count: 2,
          input_specs_list: [
            %{_enum_count: 0, index: 2, type: :constant},
            %{_enum_count: 1, index: 2, output_index: 0, type: :ugen}
          ],
          outputs_count: 1,
          output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
        },
        %SuperCollider.SynthDef.UGen{
          class_name: "Line",
          calculation_rate: 2,
          special_index: 0,
          inputs_count: 4,
          input_specs_list: [
            %{_enum_count: 0, index: 3, type: :constant},
            %{_enum_count: 1, index: 4, type: :constant},
            %{_enum_count: 2, index: 5, type: :constant},
            %{_enum_count: 3, index: 4, type: :constant}
          ],
          outputs_count: 1,
          output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
        },
        %SuperCollider.SynthDef.UGen{
          class_name: "BinaryOpUGen",
          calculation_rate: 2,
          special_index: 2,
          inputs_count: 2,
          input_specs_list: [
            %{_enum_count: 0, index: 3, output_index: 0, type: :ugen},
            %{_enum_count: 1, index: 4, output_index: 0, type: :ugen}
          ],
          outputs_count: 1,
          output_specs_list: [%{_enum_count: 0, calculation_rate: 2}]
        },
        %SuperCollider.SynthDef.UGen{
          class_name: "Pan2",
          calculation_rate: 2,
          special_index: 0,
          inputs_count: 3,
          input_specs_list: [
            %{_enum_count: 0, index: 5, output_index: 0, type: :ugen},
            %{_enum_count: 1, index: 4, type: :constant},
            %{_enum_count: 2, index: 3, type: :constant}
          ],
          outputs_count: 2,
          output_specs_list: [
            %{_enum_count: 0, calculation_rate: 2},
            %{_enum_count: 1, calculation_rate: 2}
          ]
        },
        %SuperCollider.SynthDef.UGen{
          class_name: "Out",
          calculation_rate: 2,
          special_index: 0,
          inputs_count: 3,
          input_specs_list: [
            %{_enum_count: 0, index: 4, type: :constant},
            %{_enum_count: 1, index: 6, output_index: 0, type: :ugen},
            %{_enum_count: 2, index: 6, output_index: 1, type: :ugen}
          ],
          outputs_count: 0,
          output_specs_list: []
        }
      ],
      varient_count: 0,
      varient_specs_list: []
    }
  ]
}
```

```elixir
SynthDef.ScFile.decode(bin_data) |> SynthDef.ScFile.encode()
```

## Send to server

```elixir
SuperCollider.command(:d_recv, bin_data)
```

<!-- livebook:{"output":true} -->

```
:ok
```

<!-- livebook:{"output":true} -->

```

20:43:00.616 [info] /d_recv

```

## Play SynthDef on server

```elixir
SuperCollider.command(:s_new, ["closedhat", 100, 1, 0, []])
```

<!-- livebook:{"output":true} -->

```
:ok
```

<!-- livebook:{"output":true} -->

```

20:48:50.985 [error] /s_newduplicate node ID

```

```elixir
SuperCollider.command(:s_new, ["ambient", 100, 1, 0, []])
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
SuperCollider.command(:n_free, 100)
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Quit

```elixir
SuperCollider.command(:quit)
```

<!-- livebook:{"output":true} -->

```
:ok
```
